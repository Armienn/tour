Pakker, variabler, og funktioner.
Lær de grundlæggende komponenter af ethvert Go program.

The Go Authors
https://golang.org

* Pakker (packages)

Alle Go programmer er opbygget af pakker (packages).

Programmer starter med at køre i pakken `main`.

Dette program bruger pakkerne med importeringsstierne `"fmt"` and `"math/rand"`. 

Af konvention er pakkenavnet det samme som det sidste element af importeringsstien. For eksempel består pakken `"math/rand"` af filer, som begynder med erklæringen `package`rand`.

#appengine: *Note:* miljøet de her programmer kører i er deterministisk,
#appengine: so hver gang du kører eksempelprogrammet vil `rand.Intn`
#appengine: returnere det samme tal.
#appengine:
#appengine: (For at se et andet tal, `seed` tal generatoren; se [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].)

.play basics/packages.go

* Importeringer

Den her kode grupperer importeringer in i en parenteriseret, "faktoreret" `import` erklæring.

Man kan også skrive adskillige importerings erklæringer, sådan:

	import "fmt"
	import "math"

Men det er god programmeringsstil at bruge den faktorerede `import` erklæring.

.play basics/imports.go

* Eksporterede navne

I Go bliver et navn eksporteret hvis det begynder med et stort bogstav.
For eksempel, `Pizza` er et eksporteret navn, ligesom `Pi`, hvilket er
eksporteret fra `math` pakken.

`pizza` og `pi` starter ikke med et stort bogstav, så de bliver ikke eksporteret.

Når man importerer en pakke, kan man kun referere til dens eksporterede navne.
Alle "ueksporterede" navne kan ikke tilgås udenfor pakken, kun inde i.

Kør koden. Læg mærke til fejlbeskeden.

Ret `math.pi` til `math.Pi` for at fikse fejlen, og prøv igen.

.play basics/exported-names.go

* Funktioner

En funktion kan tage nul eller flere argumenter.

I det her eksempel tager `add` to parametre af typen `int`. 

Læg mærke til at typen kommer _efter_ navnet på variablen.

(For mere omkring hvorfor typer ser ud som de gør, se [[https://blog.golang.org/gos-declaration-syntax][artiklen om Go's deklarationssyntaks]].)

.play basics/functions.go

* Funktioner fortsat

Når to eller flere funktionsparametre i træk har samme type, kan man undlade typen fra alle bortset fra den sidste.

I det her eksempel har vi forkortet

	x int, y int

til

	x, y int

.play basics/functions-continued.go

* Adskillige resultater

En funktion kan returnere et vilkårligt antal resultater.

`swap` funktionen returnerer to "strings" (tekst-stykker).

.play basics/multiple-results.go

* Named return values

Go's return values may be named. If so, they are treated as variables defined at the top of the function.

These names should be used to document the meaning of the return values.

A `return` statement without arguments returns the named return values. This is known as a "naked" return.

Naked return statements should be used only in short functions, as with the example shown here. They can harm readability in longer functions.

.play basics/named-results.go

* Variables

The `var` statement declares a list of variables; as in function argument lists, the type is last.

A `var` statement can be at package or function level. We see both in this example.

.play basics/variables.go

* Variables with initializers

A var declaration can include initializers, one per variable.

If an initializer is present, the type can be omitted; the variable will take the type of the initializer.

.play basics/variables-with-initializers.go

* Short variable declarations

Inside a function, the `:=` short assignment statement can be used in place of a `var` declaration with implicit type.

Outside a function, every statement begins with a keyword (`var`, `func`, and so on) and so the `:=` construct is not available.

.play basics/short-variable-declarations.go

* Basic types

Go's basic types are

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias for uint8

	rune // alias for int32
	     // represents a Unicode code point

	float32 float64

	complex64 complex128

The example shows variables of several types,
and also that variable declarations may be "factored" into blocks,
as with import statements.

The `int`, `uint`, and `uintptr` types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems.
When you need an integer value you should use `int` unless you have a specific reason to use a sized or unsigned integer type.

.play basics/basic-types.go

* Zero values

Variables declared without an explicit initial value are given their
_zero_value_.

The zero value is:

- `0` for numeric types,
- `false` for the boolean type, and
- `""` (the empty string) for strings.

.play basics/zero.go

* Type conversions

The expression `T(v)` converts the value `v` to the type `T`.

Some numeric conversions:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Or, put more simply:

	i := 42
	f := float64(i)
	u := uint(f)

Unlike in C, in Go assignment between items of different type requires an
explicit conversion.
Try removing the `float64` or `uint` conversions in the example and see what happens.

.play basics/type-conversions.go

* Type inference

When declaring a variable without specifying an explicit type (either by using the `:=` syntax or `var`=` expression syntax), the variable's type is inferred from the value on the right hand side.

When the right hand side of the declaration is typed, the new variable is of that same type:

	var i int
	j := i // j is an int

But when the right hand side contains an untyped numeric constant, the new variable may be an `int`, `float64`, or `complex128` depending on the precision of the constant:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Try changing the initial value of `v` in the example code and observe how its type is affected.

.play basics/type-inference.go

* Constants

Constants are declared like variables, but with the `const` keyword.

Constants can be character, string, boolean, or numeric values.

Constants cannot be declared using the `:=` syntax.

.play basics/constants.go

* Numeric Constants

Numeric constants are high-precision _values_.

An untyped constant takes the type needed by its context.

Try printing `needInt(Big)` too.

(An `int` can store at maximum a 64-bit integer, and sometimes less.)

.play basics/numeric-constants.go

* Congratulations!

You finished this lesson!

You can go back to the list of [[/list][modules]] to find what to learn next, or continue with the [[javascript:click('.next-page')][next lesson]].
